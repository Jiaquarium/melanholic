{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\n\nfunction getAllFileDataPromise(fileNames) {\n  return Promise.resolve(fileNames.map(fileName => {\n    // remove md from fileName to get Id\n    const Id = fileName.replace(/\\.md$/, ''); // read markdown as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    fs.readFile(fullPath, {\n      encoding: 'utf8'\n    }, (err, fileContents) => {\n      // use gray-matter to parse through YAML \"front-matter\"\n      console.log(\"fileContents\" + fileContents);\n      const matterResult = matter(fileContents); // combine the data with Id\n\n      return _objectSpread({\n        Id\n      }, matterResult.data);\n    });\n  }));\n}\n\nexport async function getSortedPostsData() {\n  // get file names under post\n  return fs.readdir(postsDirectory, (err, fileNames) => {\n    Promise.all().then(allPostData => {\n      console.log(allPostData);\n      return allPostData.sort((a, b) => a.date < b.date ? 1 : -1);\n    });\n  });\n}\n;","map":{"version":3,"sources":["/Users/jamesgu/github/personal/melanholic/nextjs-blog/lib/posts-data.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getAllFileDataPromise","fileNames","Promise","resolve","map","fileName","Id","replace","fullPath","readFile","encoding","err","fileContents","console","log","matterResult","data","getSortedPostsData","readdir","all","then","allPostData","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,YAAzB,CAAvB;;AAEA,SAASC,qBAAT,CAA+BC,SAA/B,EAA0C;AACtC,SAAOC,OAAO,CAACC,OAAR,CAAgBF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACAZ,IAAAA,EAAE,CAACgB,QAAH,CAAYD,QAAZ,EAAsB;AAACE,MAAAA,QAAQ,EAAE;AAAX,KAAtB,EAA0C,CAACC,GAAD,EAAMC,YAAN,KAAuB;AAC7D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBF,YAA7B;AACA,YAAMG,YAAY,GAAGpB,MAAM,CAACiB,YAAD,CAA3B,CAH6D,CAK7D;;AACA;AACIN,QAAAA;AADJ,SAEOS,YAAY,CAACC,IAFpB;AAIH,KAVD;AAWH,GAjBsB,CAAhB,CAAP;AAkBH;;AAED,OAAO,eAAeC,kBAAf,GAAoC;AACvC;AACA,SAAOxB,EAAE,CAACyB,OAAH,CAAWtB,cAAX,EAA2B,CAACe,GAAD,EAAMV,SAAN,KAAoB;AAClDC,IAAAA,OAAO,CAACiB,GAAR,GAEEC,IAFF,CAEOC,WAAW,IAAI;AAClBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACA,aAAOA,WAAW,CAACC,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAAlD,CAAP;AACH,KALD;AAMH,GAPM,CAAP;AAQH;AAAA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\n\nfunction getAllFileDataPromise(fileNames) {\n    return Promise.resolve(fileNames.map(fileName => {\n        // remove md from fileName to get Id\n        const Id = fileName.replace(/\\.md$/, '');\n        \n        // read markdown as string\n        const fullPath = path.join(postsDirectory, fileName);\n        fs.readFile(fullPath, {encoding: 'utf8'}, (err, fileContents) => {\n            // use gray-matter to parse through YAML \"front-matter\"\n            console.log(\"fileContents\" + fileContents);\n            const matterResult = matter(fileContents);\n    \n            // combine the data with Id\n            return {\n                Id,\n                ...matterResult.data\n            };\n        });\n    }));\n} \n\nexport async function getSortedPostsData() {\n    // get file names under post\n    return fs.readdir(postsDirectory, (err, fileNames) => {\n        Promise.all(\n\n        ).then(allPostData => {\n            console.log(allPostData);\n            return allPostData.sort((a, b) => a.date < b.date ? 1 : -1)\n        })\n    });\n};"]},"metadata":{},"sourceType":"module"}