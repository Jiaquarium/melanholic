{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\nexport async function getSortedPostsData() {\n  // get file names under post\n  return fs.readdir(postsDirectory, (err, fileNames) => {\n    Promise.all(fileNames.map(fileName => {\n      // remove md from fileName to get Id\n      const Id = fileName.replace(/\\.md$/, ''); // read markdown as string\n\n      const fullPath = path.join(postsDirectory, fileName);\n      return fs.readFile(fullPath, {\n        encoding: 'utf8'\n      }, (err, fileContents) => {\n        // use gray-matter to parse through YAML \"front-matter\"\n        const matterResult = matter(fileContents); // combine the data with Id\n\n        return _objectSpread({\n          Id\n        }, matterResult.data);\n      });\n    })).then(allPostData => {\n      console.log(allPostData);\n      return allPostData.sort((a, b) => a.date < b.date ? 1 : -1);\n    });\n  });\n}\n;","map":{"version":3,"sources":["/Users/jamesgu/github/personal/melanholic/nextjs-blog/lib/posts-data.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","readdir","err","fileNames","Promise","all","map","fileName","Id","replace","fullPath","readFile","encoding","fileContents","matterResult","data","then","allPostData","console","log","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,YAAzB,CAAvB;AAEA,OAAO,eAAeC,kBAAf,GAAoC;AACvC;AACA,SAAOP,EAAE,CAACQ,OAAH,CAAWL,cAAX,EAA2B,CAACM,GAAD,EAAMC,SAAN,KAAoB;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAClC;AACA,YAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFkC,CAIlC;;AACA,YAAMC,QAAQ,GAAGhB,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BW,QAA1B,CAAjB;AACA,aAAOd,EAAE,CAACkB,QAAH,CAAYD,QAAZ,EAAsB;AAACE,QAAAA,QAAQ,EAAE;AAAX,OAAtB,EAA0C,CAACV,GAAD,EAAMW,YAAN,KAAuB;AACpE;AACA,cAAMC,YAAY,GAAGnB,MAAM,CAACkB,YAAD,CAA3B,CAFoE,CAIpE;;AACA;AACIL,UAAAA;AADJ,WAEOM,YAAY,CAACC,IAFpB;AAIH,OATM,CAAP;AAUH,KAhBW,CAAZ,EAgBIC,IAhBJ,CAgBSC,WAAW,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,aAAOA,WAAW,CAACG,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAAlD,CAAP;AACH,KAnBD;AAoBH,GArBM,CAAP;AAsBH;AAAA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\n\nexport async function getSortedPostsData() {\n    // get file names under post\n    return fs.readdir(postsDirectory, (err, fileNames) => {\n        Promise.all(fileNames.map(fileName => {\n            // remove md from fileName to get Id\n            const Id = fileName.replace(/\\.md$/, '');\n            \n            // read markdown as string\n            const fullPath = path.join(postsDirectory, fileName);\n            return fs.readFile(fullPath, {encoding: 'utf8'}, (err, fileContents) => {\n                // use gray-matter to parse through YAML \"front-matter\"\n                const matterResult = matter(fileContents);\n        \n                // combine the data with Id\n                return {\n                    Id,\n                    ...matterResult.data\n                };\n            });\n        })).then(allPostData => {\n            console.log(allPostData);\n            return allPostData.sort((a, b) => a.date < b.date ? 1 : -1)\n        })\n    });\n};\n\n"]},"metadata":{},"sourceType":"module"}