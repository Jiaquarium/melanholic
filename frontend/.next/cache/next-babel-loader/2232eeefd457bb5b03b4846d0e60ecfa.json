{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\nexport function getSortedPostsData() {\n  // get file names under post\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostData = fileNames.map(fileName => {\n    // remove md from fileName to get Id\n    const Id = fileName.replace(/\\.md$/, ''); // read markdown as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // use gray-matter to parse through YAML \"front-matter\"\n\n    const matterResult = matter(fileContents); // combine the data with Id\n\n    return _objectSpread({\n      Id\n    }, matterResult.data);\n  });\n  return allPostData.sort((a, b) => a.date < b.date ? 1 : -1);\n}\n;","map":{"version":3,"sources":["/Users/jamesgu/github/personal/melanholic/nextjs-blog/lib/posts-data.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostData","map","fileName","Id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,YAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjC;AACA,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AAEA,QAAMO,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC1C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF0C,CAI1C;;AACA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN0C,CAQ1C;;AACA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B,CAT0C,CAW1C;;AACA;AACIH,MAAAA;AADJ,OAEOK,YAAY,CAACC,IAFpB;AAIH,GAhBmB,CAApB;AAkBA,SAAOT,WAAW,CAACU,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAAlD,CAAP;AACH;AAAA","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts-data');\n\nexport function getSortedPostsData() {\n    // get file names under post\n    const fileNames = fs.readdirSync(postsDirectory);\n    \n    const allPostData = fileNames.map(fileName => {\n        // remove md from fileName to get Id\n        const Id = fileName.replace(/\\.md$/, '');\n        \n        // read markdown as string\n        const fullPath = path.join(postsDirectory, fileName);\n        const fileContents = fs.readFileSync(fullPath, 'utf8');\n\n        // use gray-matter to parse through YAML \"front-matter\"\n        const matterResult = matter(fileContents);\n\n        // combine the data with Id\n        return {\n            Id,\n            ...matterResult.data\n        };\n    });\n\n    return allPostData.sort((a, b) => a.date < b.date ? 1 : -1);\n};\n"]},"metadata":{},"sourceType":"module"}